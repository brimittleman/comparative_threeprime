#Snakefile
#
#This file will run the threeprimeseq pipeline from fastq files including assembling reference genome
#
#To configure the paths to data files and other settings, edit
#config.yaml
#
#to configure job submission settings for cluster, edit
#cluster.json and submit.snakemake.sh

#to run on RCC midway2 use 'bash submit-snakemake.sh'


import glob
import os
from snakemake.utils import R

#Configuration -------------------------------------



#species tag
spe=config["spe"]
spe_gen=config["spe_gen"]
spe_lengths= config["spe_lengths"]

#Paths for data (end with forward slash)
dir_proj= config["dir_proj"]
dir_gen=config["dir_genome"]
output =  "output/"
dir_data= dir_proj + "data/"
fastq_dir= dir_data + "fastq/"
fastqc_dir = output + "fastqc/"
dir_bam= dir_data + "bam/"
dir_sort= dir_data + "sort/"
dir_bed = dir_data + "bed/"
dir_bedsort= dir_data + "bed_sort/"
dir_bedgraph= dir_data + "bedgraph/" 
dir_sortbg= dir_data + "bedgraph_sort/"
dir_bigwig= dir_data + "bigwig/"
dir_bedgraph_5= dir_data + "bedgraph_5prime/"



assert os.path.exists(dir_proj), "Project directory exists"


#Directory to send logi files. Needs to be created manually since it
#is not a file created by a Snakemake rule.
dir_log = config["dir_log"]
if not os.path.isdir(dir_log):
     os.mkdir(dir_log)

samples = set(glob_wildcards(fastq_dir + "{samples}.fastq").samples)


rule all:
    input:
       expand(fastqc_dir + "{samples}_fastqc.html", samples = samples),
       expand(dir_bam + "{samples}.bam", samples = samples),
       expand(dir_sort + "{samples}-sort.bam", samples= samples),
       expand(dir_sort + "{samples}-sort.bam.bai", samples=samples),
       expand(dir_bed +  "{samples}.bed", samples = samples),
       expand(dir_bedsort +  "{samples}-sort.bed", samples = samples),
       expand(dir_bedgraph + "{samples}.bg", samples=samples),
       expand(dir_sortbg + "{samples}.sort.bg", samples=samples),
       expand(dir_bigwig + "{samples}.bw", samples=samples),
       expand(dir_bedgraph_5 + "{samples}.5prime.bg", samples=samples)
       
rule fastqc:
     input:
         fastq_dir + "{samples}.fastq"
     output:
         fastqc_dir + "{samples}_fastqc.html",
         fastqc_dir + "{samples}_fastqc.zip"
     params:
         outdir = fastqc_dir
     shell:
         "fastqc -o {params.outdir} {input}"
         
         
rule subread_index:
     input: dir_gen + spe_gen
     output: dir_gen + spe + ".reads"
     params: prefix = dir_gen + spe
     shell: "subread-buildindex -o {params.prefix} {input}"
     
rule subjunc:
     input:
         read = fastq_dir + "{samples}.fastq",
         index = dir_gen + spe + ".reads"
     output:
         dir_bam + "{samples}.bam"
     params:
         prefix =  dir_gen + spe
     threads: 8
     shell: "subjunc -i {params.prefix} -r {input.read} -T {threads} > {output}"  
     
     
rule sort_bam:
     input:
         dir_bam + "{samples}.spe.bam"
     output:
         dir_sort + "{samples}-sort.bam"
     shell: "samtools sort -o {output} {input}"
     
rule index_bam:
     input:
         dir_sort + "{samples}-sort.bam"
     output:
         dir_sort + "{samples}-sort.bam.bai"
     shell: "samtools index {input}"
     
     
rule bamtobed:
    input:
        bam = dir_sort + "{samples}-sort.bam"
    output:
        bed= dir_bed + "{samples}.bed"
    shell: "bedtools bamtobed -i {input.bam} > {output.bed}"
    
    
rule sort_bed:
    input:
        bed= dir_bed + "{samples}.bed"
    output:
        sortedbed= dir_bedsort + "{samples}-sort.bed"
    shell: "sort -k1,1 -k2,2n {input.bed} > {output.sortedbed}"
    
    

rule bedgraph: 
    input:
        bam = dir_sort + "{samples}-sort.bam"
    output: dir_bedgraph + "{samples}.bg"
    shell: "bedtools genomecov -ibam {input.bam} -bg -split > {output}"
    
rule bedgraph_5: 
    input:
        bam = dir_sort + "{samples}-sort.bam"
    output: dir_bedgraph_5 + "{samples}.5prime.bg"
    shell: "bedtools genomecov -ibam {input.bam} -bg -5 > {output}"

rule sort_bg:
    input: dir_bedgraph + "{samples}.bg"
    output: dir_sortbg + "{samples}-sort.bg"
    shell: "sort -k1,1 -k2,2n {input} > {output}"


rule bg_to_bw:
    input:
        bg= dir_sortbg + "{samples}-sort.bg",
        len= spe_lengths  
    output: dir_bigwig + "{samples}.bw"
    shell: "bedGraphToBigWig {input.bg} {input.len} {output}"
    
